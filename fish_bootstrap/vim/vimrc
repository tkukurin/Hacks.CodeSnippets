
let mapleader = ","
let g:mapleader = ","

set nocompatible
set fileformat=unix
set fileformats=unix,dos,mac
try | lang en_US | catch | endtry

let g:plug_shallow = 0  " {{{
call plug#begin()

" Sensible defaults
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-vinegar'

" Status bar and prompt
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'edkolev/tmuxline.vim', { 'on': [ 'Tmuxline', 'TmuxlineSimpe' ] }
Plug 'edkolev/promptline.vim', { 'on': 'PromptlineSnapshot' }

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Git
Plug 'airblade/vim-gitgutter'

" Show trailing whitespace in red background
Plug 'bronson/vim-trailing-whitespace'

" File type support
Plug 'rstacruz/sparkup'

" Colors
" Plug 'ap/vim-css-color'

" And the rest
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-eunuch'

Plug 'morhetz/gruvbox'

call plug#end()  " }}}


" FZF mappings {{{
" https://github.com/junegunn/fzf/blob/master/README-VIM.md
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')
" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
  \ 'prefix': '^.*$',
  \ 'source': 'rg -n ^ --color always',
  \ 'options': '--ansi --delimiter : --nth 3..',
  \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))
inoremap <expr> <c-x><c-f> fzf#vim#complete#path('rg --files')
command! -bang -complete=dir -nargs=? LS
    \ call fzf#run(fzf#wrap({'source': 'ls', 'dir': <q-args>}, <bang>0))

command! -bang -nargs=* Rg call fzf#vim#grep(
      \ "rg --column --line-number --no-heading --color=always --smart-case "
      \.shellescape(<q-args>),
      \ 1, 
      \ fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}), <bang>0
      \)

" map <leader><leader> :buffers<CR>:b<space>
nnoremap <leader><leader> :Buffers<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>gg :Rg<CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>bl :BLines<CR>
nnoremap <silent> <Leader>' :Marks<CR>
nnoremap <silent> <Leader>gc :Commits<CR>
nnoremap <silent> <Leader>gf :GFiles<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>
" }}}


nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <leader>vt :cd %:p:h<CR>:vert term<CR>
nnoremap <leader>ht :cd %:p:h<CR>:term<CR>

" File-type
filetype on
filetype plugin on
filetype indent on

silent execute '!mkdir -p ~/.vim/backup'
set autoread  " autoread external changes. use `:e!` to force re-read
set backupdir=~/.vim/backup/
set backupskip=/tmp/*,/private/tmp/*
" helptags ~/.vim/doc
set backup             " keep a backup file
set cindent
set complete=k,.,w,b,u,t,i
set cursorline         " Highlight the current line number
set directory=~/.vim/backup,/tmp " This is where the swapfiles go
set history=1000       " keep 50 lines of command line history
set undolevels=1000
set ignorecase         " Ignore the case when searching
set smartcase          " Override the 'ignorecase' option if the search pattern contains ucase
set laststatus=2       " Show status only when there are more than two windows
set lazyredraw         " Don't redraw while executing macros (good performance config)
set listchars=tab:>-,space:␣,extends:>,precedes:<
set cmdheight=2        " Helps avoiding 'hit enter' prompt
set foldmethod=indent
set foldminlines=5
set foldlevelstart=1
set magic              " Use some magic in search patterns
set matchtime=2        " Show the match for n tenths of a second
set noerrorbells       " Damn error bells!
set noexpandtab
set number relativenumber " Show line numbers
set copyindent
set nostartofline      " Don't jump to start of line on pagedown
set nrformats+=alpha   " Allows CTRL-A and CTRL-X to increment/decrement letters
set pastetoggle=<F11>
set scrolloff=3        " Keep 3 lines above and below the cursor
set shiftwidth=2
set shortmess=aI       " Avoid 'Hit enter to continue' message, no intro msg
set showbreak=…\  " comment to keep space after continuation
set showcmd            " Show uncompleted command
set showmatch          " Show the matching closing bracket
set showmode           " Show current edit mode
set smartindent        " Indent after { has been typed
set softtabstop=2
set splitbelow         " Create new window below current one
set splitright         " Create new window to the right of the current one
set tabstop=2
set title
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
set ttyfast            " We're running on a fast terminal
" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :50  :  up to 50 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:50,%,n~/.viminfo
set visualbell         " Better than a beep
set nowrap             " Don't wrap long lines
set whichwrap=<,>,h,l,~,[,]   " Left/right motion line wrap
" have command-line completion <Tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmenu wildignorecase wildmode=list:full wildcharm=<C-Z>
set formatoptions-=t
set textwidth=80
set mouse=a
set clipboard^=unnamed,unnamedplus

" statusbar
let g:airline_theme='distinguished'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tmuxline#enabled = 0

nnoremap <leader><CR> :nohl<CR>

" Toggle relative line numbers
augroup numbertoggle
	autocmd!
	autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
	autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Set up pretty colors
syntax enable
set background=dark
let myColorscheme = 'gruvbox'

if &term ==? 'xterm-256color' || &term ==? 'screen-256color-bce' || &term ==? 'screen-256color'
	set t_Co=256
	execute "colorscheme ".myColorscheme
	let g:solarized_termtrans = 1
else
	colorscheme default
endif

" Map key to toggle opt - http://vim.wikia.com/wiki/Quick_generic_option_toggling
function MapToggle(key, opt)
  let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
  exec 'nnoremap '.a:key.' '.cmd
  exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command -nargs=+ MapToggle call MapToggle(<f-args>)

MapToggle <F3> list
MapToggle <F5> wrap

" Fast editing of the .vimrc {{{
map <leader>e :tabedit! ~/.vimrc<cr>
" When vimrc is edited, reload it
autocmd! bufwritepost ~/.vimrc source ~/.vimrc
autocmd! bufwritepost ~/.vim/vimrc source ~/.vim/vimrc
" Fast editing of the colorscheme
silent execute "map <leader>co :tabedit! ~/.vim/colors/".myColorscheme.".vim<cr>"
" When colorscheme is edited, reload it
autocmd! bufwritepost ~/.vim/colors/*.vim execute "colorscheme ".myColorscheme
" }}}

" Fast saving
nmap <M-s> :w!<cr>
nmap <leader>w :w!<cr>
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

nnoremap ; :


" Session management
" Maybe checkout http://peterodding.com/code/vim/session/
silent execute '!mkdir -p ~/.vim/sessions'
nmap SM :wa<C-M>:mksession! ~/.vim/sessions/
nmap SO :wa<C-M>:source ~/.vim/sessions/

" View management
au BufWritePost,BufLeave,WinLeave ?* mkview
au BufWritePost,BufLeave,WinLeave quickfix au!
au BufWinEnter ?* silent loadview
au BufWinEnter quickfix au!

fun! TrimTrailing() " {{{
  " https://stackoverflow.com/questions/35390415/cursor-jump-in-vim-after-save
  let [_, l, c, _] = getpos('.') | %s/\s\+$//e | call cursor(l, c)
endfun " }}}

augroup vimrcEx "{{{
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
  autocmd FileType markdown,md,c,cpp,java,php,perl,python,html,htmldjango,mason,tt2html,css,javascript
        \ au BufWritePre * :call TrimTrailing()
  " or put in ftdetect/org.vim
  autocmd BufRead,BufNewFile *.org setfiletype org
  autocmd BufRead,BufNewFile *.ts setfiletype javascript
augroup END "}}}

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Remap VIM 0 to first non-blank character
map 0 ^

" Resize splits evenly automatically
autocmd VimResized * wincmd =

" Tab configuration
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <Left> :tabprevious<cr>
map <Right> :tabnext<cr>

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<cr>gvdi<C-R>=current_reg<cr><Esc>

" Specify the behavior when switching between buffers
try
	set switchbuf=usetab
	set stal=2
catch
endtry

" http://cloudhead.io/2010/04/24/staying-the-hell-out-of-insert-mode/
inoremap kj <Esc>

" TAG Jumping
" Create the `tags` file (may need to install ctags)
command! MakeTags !ctags -R .

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
	set hlsearch
	map <C-\> :nohlsearch<cr>
endif

" open and close folds
" Toggle fold state between closed and opened.
" Space will open/close folds if they exist
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>

" In visual mode, create folds; otherwise, open/close
nnoremap r za
onoremap r <C-C>za
vnoremap r zf
vnoremap <Space> zf

" have the usual indentation keystrokes still work in visual mode:
vmap <Tab> <C-T>
vmap <S-Tab> <C-D>

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
"inoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" Cope
" Do :help cope if you are unsure what cope is. It's super useful!
map <leader>ccc :botright cope 20<cr>
map <leader>\ :ccl<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>

" Toggles
nmap <C-n> :tabnew<CR>

" Fuzzy file, buffer, mru, tag, etc finder
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
			\ 'dir':  '\v[\/]\.(git|hg|svn|vim/(backup|view))$',
			\ 'file': '\v\.(zwc|exe|so|dll)$',
			\ }

" Haskell
let g:haddock_browser="/usr/bin/env lynx"

" Sparkup
let g:sparkupNextMapping = '<c-n>'
let g:sparkupExecuteMapping = '<c-e>'

" CommandT
let g:CommandTMaxHeight = 30
noremap <leader>ct :CommandT<cr>
noremap <leader>cty :CommandTFlush<cr>

" TComment
noremap <leader>cc :TComment<cr>

" Ensure vimrc has marker as foldmethod
setlocal foldmethod=marker

